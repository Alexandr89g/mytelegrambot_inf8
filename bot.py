
import os
import json
import openai
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===

BOT_TOKEN = os.environ["BOT_TOKEN"]
openai.api_key = os.environ["OPENAI_API_KEY"]

with open("ktp_8class.json", "r", encoding="utf-8") as file:
    ktp_topics = json.load(file)

async def get_theory_from_ai(topic):
    prompt = (
        f"–¢—ã ‚Äî —É—á–∏—Ç–µ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏ 8 –∫–ª–∞—Å—Å–∞. –û–±—ä—è—Å–Ω–∏ —Ç–µ–º—É ¬´{topic}¬ª –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ, "
        f"–¥–ª—è —à–∫–æ–ª—å–Ω–∏–∫–∞. –ü—Ä–∏–≤–µ–¥–∏ –ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ. –ù–µ —É–ø–æ–º–∏–Ω–∞–π, —á—Ç–æ —Ç—ã –ò–ò."
    )
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.6,
        max_tokens=400
    )
    return response["choices"][0]["message"]["content"]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ 8 –∫–ª–∞—Å—Å–∞.\n\n"
        "üìö –Ø —Ä–∞–±–æ—Ç–∞—é —Å—Ç—Ä–æ–≥–æ –ø–æ —à–∫–æ–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ (–ö–¢–ü).\n"
        "–ù–∞–ø–∏—à–∏ —Ç–µ–º—É —É—Ä–æ–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "üëâ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ\nüëâ —Ü–∏–∫–ª for\nüëâ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö\n"
        "–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏: 17, 21 –∏ —Ç.–ø."
    )
    await update.message.reply_text(message)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text.strip().lower()
    found = None

    if user_text.isdigit() and user_text in ktp_topics:
        found = ktp_topics[user_text]

    if not found:
        for topic_id, topic in ktp_topics.items():
            if user_text in topic.lower():
                found = topic
                break

    if found:
        await update.message.reply_text(f"üìò –¢–µ–º–∞: {found}\n\n‚åõ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ...")
        explanation = await get_theory_from_ai(found)
        await update.message.reply_text(f"üìñ –í–æ—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ:\n\n{explanation}")
    else:
        await update.message.reply_text(
            "‚ùó–≠—Ç–∞ —Ç–µ–º–∞ –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ —à–∫–æ–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É (–ö–¢–ü).\n"
            "–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–æ—á–Ω–µ–µ –∏–ª–∏ —É–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏ –æ—Ç 1 –¥–æ 34."
        )

app = ApplicationBuilder().token(BOT_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

print("‚úÖ –ë–æ—Ç –ø–æ –ö–¢–ü 8 –∫–ª–∞—Å—Å–∞ –∑–∞–ø—É—â–µ–Ω")
app.run_polling()
