
import os, json
import openai
from datetime import date
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from calendar import get_school_week
from logic import generate_lesson

openai.api_key = os.environ["OPENAI_API_KEY"]
BOT_TOKEN = os.environ["BOT_TOKEN"]

with open("ktp_8class.json", encoding="utf-8") as f:
    topics = json.load(f)

user_state = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.effective_user.first_name
    user_state[update.effective_user.id] = "menu"
    keyboard = [["üìò –ù–æ–≤–∞—è —Ç–µ–º–∞", "üîÅ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ"], ["üìù –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –°–û–†"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {name}! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ 8 –∫–ª–∞—Å—Å–∞.
"
        "–•–æ—á–µ—à—å –∏–∑—É—á–∏—Ç—å –Ω–æ–≤—É—é —Ç–µ–º—É, –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∏–ª–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –°–û–†?",
        reply_markup=reply_markup
    )

async def message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip().lower()
    user_id = update.effective_user.id

    if text == "üìò –Ω–æ–≤–∞—è —Ç–µ–º–∞":
        week = get_school_week()
        topic = topics.get(str(week), "–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await update.message.reply_text(f"–¢–µ–º–∞ –Ω–µ–¥–µ–ª–∏ ‚Ññ{week}: {topic}")
        review = await generate_lesson(topic, "review")
        theory = await generate_lesson(topic, "theory")
        practice = await generate_lesson(topic, "practice")
        test = await generate_lesson(topic, "test")

        await update.message.reply_text(f"üîç –ê–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è:
{review}")
        await update.message.reply_text(f"üìñ –¢–µ–æ—Ä–∏—è:
{theory}")
        await update.message.reply_text(f"üõ† –ü—Ä–∞–∫—Ç–∏–∫–∞:
{practice}")
        await update.message.reply_text(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞:
{test}")
        await update.message.reply_text("üîö –û—Ü–µ–Ω–∏ —Å–µ–±—è –æ—Ç 0 –¥–æ 8 –∏ –æ—Ç–≤–µ—Ç—å: –ß—Ç–æ –±—ã–ª–æ –ø–æ–Ω—è—Ç–Ω–æ, –∞ —á—Ç–æ ‚Äî —Å–ª–æ–∂–Ω–æ?")
        return

    elif text == "üîÅ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ":
        week = get_school_week()
        done_topics = [f"{n}. {t}" for n, t in topics.items() if int(n) < week]
        await update.message.reply_text("–ü—Ä–æ–π–¥–µ–Ω–Ω—ã–µ —Ç–µ–º—ã:
" + "
".join(done_topics))
        return

    elif text == "üìù –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–æ—Ä":
        week = get_school_week()
        sor_topics = [f"{n}. {t}" for n, t in topics.items() if "–°–û–†" in t and int(n) <= week]
        if sor_topics:
            await update.message.reply_text("–¢–µ–º—ã –¥–ª—è –°–û–†:
" + "
".join(sor_topics))
        else:
            await update.message.reply_text("–°–û–† –ø–æ–∫–∞ –Ω–µ –ø—Ä–µ–¥–≤–∏–¥–∏—Ç—Å—è üòâ")
        return

    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: üìò –ù–æ–≤–∞—è —Ç–µ–º–∞, üîÅ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ, üìù –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –°–û–†.")

app = ApplicationBuilder().token(BOT_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message))
app.run_polling()
